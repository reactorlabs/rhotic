# In this example, we call f twice.
# In both calls, cond must not be NA.
# For the first call, a must not be NA, but for the second call, b must not be NA.
#
# For an overapproximation: cond must not be NA, a and b are unknown.
# For an underapproximation: all parameters must not be NA.

# must not be NA: if (cond) { a } else { b }
f <- function(cond, a, b) {
  # a_cond depends on: a
  a_cond <- a > 0

  # b_cond depends on: b
  b_cond <- b > 0

  # must not be NA: cond
  if (cond) {
    # must not be NA: a_cond ==> a
    if (a_cond) { 1 } else { 0 }
  } else {
    # must not be NA: b_cond ==> b
    if (b_cond) { 1 } else { 0 }
  }
}

g <- function(cond, x, y) {
  f(cond, x, y)
}

x <- .input(-1)
y <- .input(1)

# must not be NA: x
r1 <- g(T, x, y)
print(r1)

# must not be NA: y
r2 <- g(F, x, y)
print(r2)
