# An example function we want to infer the specification for.
#
# We know that because cond is used in an if, it cannot be NA.
# By propagating this constraint backwards, we conclude that mod cannot be NA,
# and i cannot be NA, therefore x cannot contain NAs.
#
# The modelling of the for loops is not sophisticated: i depends on x, so since
# we observe at least one interation where i cannot be NA, we conclude that x
# cannot be NA.

count_evens <- function(x) {
  len <- 0
  for (i in x) {
    # i: cannot be NA, must be numeric
    # mod: cannot be NA, must be integer
    mod <- i % 2

    # mod: cannot be NA
    # cond: cannot be NA, must be boolean and scalar
    cond <- mod == 0

    # cond: cannot be NA, must be numeric and scalar
    if (cond) {
        len <- len + 1
    }
  }
  len
}

ints <- 1:5
x <- .input(ints)
res <- count_evens(x)
print(res)

# This will cause an error
# nas <- c(1,2,NA)
# count_evens(nas)
