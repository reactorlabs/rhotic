% NOTE: Some of the typesetting refers to macros defined in notes.tex
% This is fine, as long as the generated definitions are only used with notes.tex

metavar x   ::= {{ com metavariables }} {{ tex \mathit{[[x]]} }}

metavar l   ::= {{ com labels }} {{ lex numeral }} {{ tex \mathit{[[l]]} }}

metavar num ::= {{ com numbers }} {{ lex numeral  }}
metavar chr ::= {{ com character sequences }} {{ lex alphanum }}

indexvar n  ::= {{ com index variables }}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
grammar

%%% CONCRETE GRAMMAR %%%

%%% Values %%%
bool {{ tex \mathsf{true} ~|~ \mathsf{false} ~|~ \bna }} :: 'bool_' ::=
                                    {{ com boolean literals }}
    | true          :: :: True          {{ tex \mathsf{true} }}
    | false         :: :: False         {{ tex \mathsf{false} }}
    | NA_b          :: :: NA            {{ com boolean \na }} {{ tex \bna }}

int {{ tex \cdots ~|~ -1 ~|~ 0 ~|~ 1 ~|~ \cdots ~|~ \ina }} :: 'int_' ::=
                                    {{ com integer literals }}
    | num           :: :: Int
    | ~ num         :: :: NegInt        {{ tex - [[num]] }}
    | NA_i          :: :: NA            {{ com integer \na }} {{ tex \ina }}

str {{ tex \cdots ~|~ \sna }} :: 'str_' ::=
                                    {{ com string literals }}
    | " chr "       :: :: Str           {{ tex ``[[chr]]" }}
    | NA_s          :: :: NA            {{ com string \na }} {{ tex \sna }}

v :: 'v_' ::=                       {{ com values $\vals$ }}
    | bool          :: :: Bool          {{ com \bvals }}
    | int           :: :: Int           {{ com \ivals }}
    | str           :: :: Str           {{ com \svals }}

%%% Simple expressions %%%
se :: 'se_' ::=                     {{ com simple expressions }}
    | v             :: :: Val           {{ com $[[v]] \in \vals$ }}
    | x             :: :: Var           {{ com $[[x]] \in \vars $ }}

%%% Unary operators %%%
uop :: 'uop_' ::=                   {{ com unary operators }} {{ tex \circ }}
    | !             :: :: Negate        {{ com logical negation }}
    | +             :: :: Plus
    | -             :: :: Minus

%%% Binary operators %%%a
bop :: 'bop_' ::=                   {{ com binary operators }} {{ tex \diamond }}
    | +             :: :: Plus
    | -             :: :: Minus
    | *             :: :: Times
    | /             :: :: Divide
    | %             :: :: Modulo        {{ com modulo }}
    | <             :: :: Less
    | <=            :: :: LessEqual
    | >=            :: :: GreaterEqual
    | >             :: :: Greater
    | =             :: :: Equal
    | =/=           :: :: NotEqual
    | /\            :: :: And           {{ com logical and }}
    | \/            :: :: Or            {{ com logical or }}

%%% Expressions %%%
e :: 'e_' ::=                           {{ com expressions }}
    | isNA se           :: :: IsNA          {{ tex [[isNA]]([[se]]) }}
    | uop se            :: :: UOp
        {{ com $[[uop]] \in \{ \neg, +, - \}$ }}
        {{ tex [[uop]][[se]] }}
    | se1 bop se2       :: :: BOp
        {{ com $[[bop]] \in \{ +, -, \times, \div, \%, <, \leq, =, \neq, >, \geq, \lor, \land \}$ }}
        {{ tex [[se1]] [[bop]] [[se2]] }}
    | se                :: :: SimpleExp

%%% Statements %%%
s :: 's_' ::=                                       {{ com statements }}
    | x <- e                        :: :: Assign
        {{ com $x \in \vars$ }}
    | x <- l ^ input()              :: :: Input
        {{ com $[[l]] \in \labels$ }}
        {{ tex [[x]] [[<-]]\, ^{[[l]]} [[input()]] }}
    | if se then s1 else s2 fi      :: :: If
        {{ tex [[if]]~[[se]]~[[then]]~[[s1]]~[[else]]~[[s2]]~[[fi]] }}
    | for x in se1 : se2 do s od    :: :: For
        {{ tex [[for]]~[[x]]~[[in]]~[[se1]]\negmedspace:\negmedspace[[se2]]~[[do]]~[[s]]~[[od]] }}
    | s1 ; s2                       :: :: Seq
    | e                             :: :: Exp

%%% Program %%%
P :: 'P_' ::=                                       {{ com program }}
    | s                             :: :: Statement

%%% Environment %%%
E :: 'Env_' ::=                                     {{ com environment }}
    | empty                         :: :: Empty         {{ com empty environment }}
    | E [ x -> v ]                  :: :: UpdateEnv     {{ com environment update }}

%%% Input stream %%%
I :: 'I_' ::=                                       {{ com input stream }}
    | empty                         :: :: Empty         {{ com empty stream }}
    | v . I                         :: :: Single        {{ tex [[v]] \cdot [[I]] }}

%%% Machine configuration %%%
C :: 'C_' ::=                                       {{ com machine configuration }}
    | stop                          :: :: Stop          {{ tex \textsc{Stop} }}
    | s I E                         :: :: sIE           {{ tex [[s]]\enspace[[I]]\,[[E]] }}

%%% Label set %%%
L :: 'L_' ::=                                       {{ com label set }}
    | empty                         :: :: Empty         {{ com empty label set }}
    | { l1 , ... , ln }             :: :: Set           {{ com labels }}
    | L1 union L2                   :: :: Intersection  {{ com union }}

%%% Execution trace %%%
T :: 'T_' ::=                                       {{ com execution trace }}
    | empty                         :: :: Empty         {{ com empty trace }}
    | T . ( s E )                   :: :: Append        {{ com append }} {{ tex [[T]] \cdot \langle [[s]]\,[[E]] \rangle }}
    | ( s E ) . T                   :: :: Prepend       {{ com prepend }} {{ tex \langle [[s]]\,[[E]] \rangle \cdot [[T]] }}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% ANALYSIS GRAMMAR %%%
Lat :: 'Lat_' ::=                                   {{ com lattice }}
    | alpha ( v )                   :: :: alpha         {{ com abstraction of concrete value }} {{ tex \alpha([[v]]) }}
    | Auop Lat                      :: :: Auop          {{ com abstract unary operation }}
    | Lat1 Abop Lat2                :: :: Abop          {{ com abstract binary operation }}
    | NA_Lat                        :: :: NA            {{ com NA analysis }}

Av {{ tex \widehat{v} }} :: 'Av_' ::=               {{ com abstract value }}
    | NA_Av                         :: :: NA            {{ com NA analysis }}

AE {{ tex \widehat{E} }} :: 'AE_' ::=               {{ com abstract environment }}
    | NA_AE                         :: :: NA            {{ com NA analysis }}

%%% NA Analysis %%%

NA_Lat :: 'NA_Lat_' ::=
    | Top                           :: :: Top
    | NA                            :: :: NA            {{ tex \textsc{na} }}
    | ! NA                          :: :: NotNA         {{ tex \neg \textsc{na} }}
    | Bot                           :: :: Bot

NA_Av :: 'NA_Av_' ::=
    | [ Lat1 , Lat2 , L ]           :: :: AVal          {{ tex \langle [[Lat1]] , [[Lat2]] , [[L]] \rangle }}

NA_AE :: 'NA_AE_' ::=                               {{ com \na analysis abstract environment }}
    | empty                         :: :: Empty         {{ com empty environment }}
    | AE [ x -> Av ]                :: :: EnvBind       {{ com environment binding }}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% TERMINALS %%%
terminals :: 'terminals_' ::=
    | isNA          :: :: IsNA      {{ tex \isna }}
    | input()       :: :: Input     {{ tex \ipt }}
    | <-            :: :: Assign    {{ tex \leftarrow }}
    | if            :: :: If        {{ tex \mathsf{if} }}
    | then          :: :: Then      {{ tex \mathsf{then} }}
    | else          :: :: Else      {{ tex \mathsf{else} }}
    | fi            :: :: Fi        {{ tex \mathsf{fi} }}
    | for           :: :: For       {{ tex \mathsf{for} }}
    | in            :: :: In        {{ tex \mathsf{in} }}
    | do            :: :: Do        {{ tex \mathsf{do} }}
    | od            :: :: Od        {{ tex \mathsf{od} }}
    | empty         :: :: Empty     {{ tex \emptyset }}
    | ->            :: :: MapsTo    {{ tex \mapsto }}
    | -se->         :: :: SEEval    {{ tex \rightharpoonup }}
    | -e->          :: :: EEval     {{ tex \longrightarrow }}
    | -->           :: :: SEval     {{ tex \longmapsto }}
    | -rec->        :: :: RecEval   {{ tex \overset{T}{\longmapsto} }}
    | !             :: :: Negate    {{ tex \neg }}
    | *             :: :: Times     {{ tex \times }}
    | /             :: :: Divide    {{ tex \div }}
    | <=            :: :: LEq       {{ tex \leq }}
    | >=            :: :: GEq       {{ tex \geq }}
    | =/=           :: :: NEq       {{ tex \neq }}
    | /\            :: :: And       {{ tex \land }}
    | \/            :: :: Or        {{ tex \lor }}
    | Top           :: :: Top       {{ tex \top }}
    | Bot           :: :: Bot       {{ tex \bot }}
    | -na-se->      :: :: NA_SEEval {{ tex \rightsquigarrow_{se} }}
    | -na-e->       :: :: NA_EEval  {{ tex \rightsquigarrow }}
    | union         :: :: Union     {{ tex \cup }}
    | Auop          :: :: Auop      {{ tex \widehat{\circ} }}
    | Abop          :: :: Abop      {{ tex \widehat{\diamond} }}

%%% FORMULAS %%%
formula :: 'formula_' ::=
  | judgement                       :: :: judgement
  | formula1 /\ formula2            :: :: and
  | formula1 \/ formula2            :: :: or
  | v = E ( x )                     :: :: lookup
  | v = [[ uop ]] ( se )            :: :: primop_uop    {{ tex [[v]] = \llbracket [[uop]] \rrbracket_1 ([[se]]) }}
  | v = [[ bop ]] ( se1 , se2 )     :: :: primop_bop    {{ tex [[v]] = \llbracket [[bop]] \rrbracket_2 ([[se1]], [[se2]]) }}
  | v1 = v2                         :: :: equal
  | v1 =/= v2                       :: :: not_equal
  | v1 < v2                         :: :: less_than
  | v1 > v2                         :: :: greater_than
  | v' = v1 + v2                    :: :: plus
  | v' = v1 - v2                    :: :: minus
  | E' = E [ x -> v ]               :: :: env_update
  | I = v . I'                      :: :: input_stream  {{ tex [[I]] = [[v]] \cdot [[I']] }}
  | Av = AE ( x )                   :: :: abstract_lookup
  | AE' = AE [ x -> Av ]            :: :: abstract_env_update
  | Av1 = Av2                       :: :: abstract_val_equal
  | Peek_se ( se ) = v              :: :: peek_se       {{ tex \mathsf{Peek_{se} } \llbracket [[se]] \rrbracket = [[v]] }}
  | v = Peek_e ( e )                :: :: peek_expr     {{ tex [[v]] = \mathsf{Peek_e} \llbracket [[e]] \rrbracket }}
  | v = Peek_s ( s )                :: :: peek_stmt     {{ tex [[v]] = \mathsf{Peek_s} \llbracket [[s]] \rrbracket }}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%% CONCRETE OPERATIONAL SEMANTICS %%%
defns
operational_semantics :: '' ::=

    %%% Evaluation of simple expressions %%%
    defn
    E se -se-> v :: :: eval_se :: 'SE_'
        {{ com evaluation of simple expressions }}
        {{ tex [[E]]\enspace[[se]] [[-se->]] [[v]] }}
    by

        -----------  :: Literal
        E v -se-> v

        v = E(x)
        --------------  :: Variable
        E x -se-> v

    %%% Evaluation of expressions %%%
    defn
    E e -e-> v :: :: eval_e :: 'E_'
        {{ com evaluation of expressions }}
        {{ tex [[E]]\enspace[[e]] [[-e->]] [[v]] }}
    by

        E se -se-> v
        v = NA_b \/ v = NA_i \/ v = NA_s
        -------------------------------- :: IsNA
        E isNA se -e-> true

        E se -se-> v
        v =/= NA_b /\ v =/= NA_i /\ v =/= NA_s
        -------------------------------------- :: IsNotNA
        E isNA se -e-> false

        E se -se-> v
        v' = [[uop]](se)
        ----------------  :: UnaryOp
        E uop se -e-> v'

        E se1 -se-> v1
        E se2 -se-> v2
        v' = [[bop]](v1, v2)
        ---------------------  :: BinaryOp
        E se1 bop se2 -e-> v'

        E se -se-> v
        ------------  :: SimpleExpression
        E se -e-> v

    %%% Evaluation of statements %%%
    defn
    C --> C' :: :: eval_s :: 'S_'
        {{ com evaluation of program states }}
        {{ tex [[C]] [[-->]] [[C']] }}
    by

        E e -e-> v
        E' = E[x -> v]
        ---------------------  :: Assign
        x <- e I E --> v I E'

        I = v . I'
        E' = E[x -> v]
        --------------------------------  :: Input
        x <- l ^ input() I E --> v I' E'

        E se -se-> v
        v = true
        ---------------------------------------  :: IfTrue
        if se then s1 else s2 fi I E --> s1 I E

        E se -se-> v
        v = false
        ---------------------------------------  :: IfFalse
        if se then s1 else s2 fi I E --> s2 I E

        E se1 -se-> v1
        E se2 -se-> v2
        v1' = v1 + 1
        E' = E[x -> v1]
        v1 < v2
        ---------------------------------------------------------------------  :: ForIncr
        for x in se1 : se2 do s od I E --> s ; for x in v1' : v2 do s od I E'

        E se1 -se-> v1
        E se2 -se-> v2
        v1' = v1 - 1
        E' = E[x -> v1]
        v1 > v2
        ---------------------------------------------------------------------  :: ForDecr
        for x in se1 : se2 do s od I E --> s ; for x in v1' : v2 do s od I E'

        E se1 -se-> v1
        E se2 -se-> v2
        E' = E[x -> v1]
        v1 = v2
        -----------------------------------------  :: ForEnd
        for x in se1 : se2 do s od I E --> s I E'

        s1 I E --> v I' E'
        ------------------------  :: Seq
        s1 ; s2 I E --> s2 I' E'

        E e -e-> v
        ---------------  :: Expression
        e I E --> v I E

%%% RECORDING SEMANTICS %%%
defns
record :: '' ::=

    defn
    T , C -rec-> T' , C' :: :: rec :: 'Rec_'
        {{ com recording a program state updates the execution trace }}
        {{ tex [[T]],\:[[C]] [[-rec->]] [[T']],\:[[C']] }}
    by

        s I E --> s' I' E'
        -------------------------------------  :: Step
        T , s I E -rec-> T . (s E) , s' I' E'


        ---------------------------------  :: Stop
        T , v I E -rec-> T . (v E) , stop


%%% NA ANALYSIS SEMANTICS %%%
defns
na_analysis :: 'NA_' ::=

    defn
    AE se -na-se-> Av :: :: na_eval_se :: 'SE_'
        {{ com abstract evaluation of simple expressions }}
        {{ tex [[AE]]\enspace[[se]] [[-na-se->]] [[Av]] }}
    by

        Av = [alpha(v), alpha(v), empty]
        --------------------------------  :: Literal
        AE v -na-se-> Av

        Av = AE(x)
        ----------------  :: Variable
        AE x -na-se-> Av

    defn
    AE e -na-e-> Av :: :: na_eval_e :: 'E_'
        {{ com abstract evaluation of expressions }}
        {{ tex [[AE]]\enspace[[e]] [[-na-e->]] [[Av]] }}
    by

        Av = [!NA, !NA, empty]
        ----------------------  :: IsNA
        AE isNA se -na-e-> Av

        AE se -na-se-> [Lat1, Lat2, L]
        v = Peek_e(uop se)
        Av = [alpha(v), Auop Lat2, L]
        -----------------------------  :: UnaryOp
        AE uop se -na-e-> Av

        AE se1 -na-se-> [Lat11, Lat12, L1]
        AE se2 -na-se-> [Lat21, Lat22, L2]
        v = Peek_e(se1 bop se2)
        Av = [alpha(v), Lat12 Abop Lat22, L1 union L2]
        ----------------------------------------------  :: BinaryOp
        AE se1 bop se2 -na-e-> Av

        AE se -na-se-> Av
        -----------------  :: SimpleExpression
        AE se -na-e-> Av

    defn
    [ s ] AE = AE' :: :: na_analysis :: 'S_'
        {{ com abstract evaluation of statements returns a new abstract environment }}
        {{ tex \llbracket [[s]] \rrbracket [[AE]] = [[AE']] }}
    by

        AE e -na-e-> Av
        AE' = AE[x -> Av]
        -----------------  :: Assign
        [x <- e] AE = AE'

        v = Peek_s(x <- l ^ input())
        Av = [alpha(v), Top, {l}]
        AE' = AE[x -> Av]
        ----------------------------  :: Input
        [x <- l ^ input()] AE = AE'


        %%% TODO: If, For
        % formalization is pretty messy and redundant...

        Peek_se(v) = true
        [s1] AE = AE'
        ----------------------------------  :: IfLiteralTrue
        [if v then s1 else s2 fi] AE = AE'

        Peek_se(v) = false
        [s2] AE = AE'
        ----------------------------------  :: IfLiteralFalse
        [if v then s1 else s2 fi] AE = AE'

        % TODO: generate constraint
        Peek_se(x) = true
        [s1] AE = AE'
        ----------------------------------  :: IfVariableTrue
        [if x then s1 else s2 fi] AE = AE'

        % TODO: generate constraint
        Peek_se(x) = false
        [s2] AE = AE'
        ----------------------------------  :: IfVariableFalse
        [if x then s1 else s2 fi] AE = AE'


        % For is harder than If, because there are two positions (se1, se2)
        % either can be a literal or a variable
        % and we can be increasing, decreasing, or finishing the loop
        % could be 24 cases!


%        E se1 -se-> v1
%        E se2 -se-> v2
%        v1' = v1 + 1
%        E' = E[x -> v1]
%        v1 < v2
%        ---------------------------------------------------------------------  :: ForIncr
%        for x in se1 : se2 do s od I E --> s ; for x in v1' : v2 do s od I E'
%
%        E se1 -se-> v1
%        E se2 -se-> v2
%        v1' = v1 - 1
%        E' = E[x -> v1]
%        v1 > v2
%        ---------------------------------------------------------------------  :: ForDecr
%        for x in se1 : se2 do s od I E --> s ; for x in v1' : v2 do s od I E'
%
%        E se1 -se-> v1
%        E se2 -se-> v2
%        E' = E[x -> v1]
%        v1 = v2
%        -----------------------------------------  :: ForEnd
%        for x in se1 : se2 do s od I E --> s I E'

        [s1] AE = AE'
        [s2] AE' = AE''
        -------------------  :: Seq
        [s1 ; s2] AE = AE''

        ---------------  :: Expression
        [e] AE = AE
