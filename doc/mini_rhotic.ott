% NOTE: Some of the typesetting refers to macros defined in notes.tex
% This is fine, as long as the generated definitions are only used with notes.tex

metavar x       ::= {{ com metavariables }} {{ tex \mathit{[[x]]} }}

metavar l       ::= {{ com labels }} {{ lex numeral }} {{ tex \mathit{[[l]]} }}

metavar num     ::= {{ com numbers }} {{ lex numeral  }}
metavar chr     ::= {{ com character sequences }} {{ lex alphanum }}

metavar a       ::= {{ com address }} {{ tex \mathit{[[a]]} }}

indexvar n      ::= {{ com index variables }}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
grammar

%%% CONCRETE GRAMMAR %%%

%%% Values %%%
bool {{ tex \mathsf{true} ~|~ \mathsf{false} ~|~ \bna }} :: 'bool_' ::=
                                    {{ com boolean literals }}
    | true          :: :: True
    | false         :: :: False
    | NA_b          :: :: NA            {{ com boolean \na }}

int {{ tex \cdots ~|~ -1 ~|~ 0 ~|~ 1 ~|~ \cdots ~|~ \ina }} :: 'int_' ::=
                                    {{ com integer literals }}
    | num           :: :: Int
    | ~ num         :: :: NegInt        {{ tex - [[num]] }}
    | NA_i          :: :: NA            {{ com integer \na }}

str {{ tex \cdots ~|~ \sna }} :: 'str_' ::=
                                    {{ com string literals }}
    | " chr "       :: :: Str           {{ tex ``[[chr]]" }}
    | NA_s          :: :: NA            {{ com string \na }}

v :: 'v_' ::=                       {{ com values $\vals$ }}
    | bool          :: :: Bool          {{ com \bvals }}
    | int           :: :: Int           {{ com \ivals }}
    | str           :: :: Str           {{ com \svals }}

%%% Simple expressions %%%
se :: 'se_' ::=                     {{ com simple expressions }}
    | v             :: :: Val           {{ com values $[[v]] \in \vals$ }}
    | x             :: :: Var           {{ com variables $[[x]] \in \vars $ }}

%%% Recorded simple expressions %%%
rse {{ tex \overline{se} }} :: 'rse_' ::=
                                    {{ com recorded simple expressions }}
    | ( se , v )    :: :: SE
        {{ com simple expression and its evaluated value }}
        {{ tex \langle [[se]], [[v]] \rangle }}

%%% Unary operators %%%
uop :: 'uop_' ::=                   {{ com unary operators }} {{ tex \circ }}
    | uop_l         :: :: Logical       {{ com logical: $\{ \neg \}$ }}
    | uop_a         :: :: Arithmetic    {{ com arithmetic: $\{ +, - \}$ }}

%%% Binary operators %%%a
bop :: 'bop_' ::=                   {{ com binary operators }} {{ tex \diamond }}
    | bop_a         :: :: Arithmetic
        {{ com arithmetic: $\{ +, -, \times, \div, \mathsf{mod} \}$ }}
    | bop_r         :: :: Relational
        {{ com relational: $\{ <, \leq, \geq, >, =, \neq \}$ }}
    | bop_l         :: :: Logical
        {{ com logical: $\{ \land, \lor \}$ }}

%%% Statements %%%
s :: 's_' ::=                                       {{ com statements }}
    | x <- se                           :: :: SimpleExp
    | x <- isNA ( se )                  :: :: IsNA
        {{ tex [[x]] [[<-]] [[isNA]]([[se]]) }}
    | x <- uop ( se )                   :: :: UOp
        {{ com $[[uop]] = (\circ_\mathsf{lgl} \cup \circ_\mathsf{arth})$ }}
        {{ tex [[x]] [[<-]] [[uop]]([[se]]) }}
    | x <- bop ( se1 , se2 )            :: :: BOp
        {{ com $[[bop]] = (\diamond_\mathsf{arith} \cup \diamond_\mathsf{rel} \cup \diamond_\mathsf{lgl})$ }}
        {{ tex [[x]] [[<-]] [[bop]]([[se1]],[[se2]]) }}
    | x <- l ^ input()                  :: :: Input
        {{ com input }}
        {{ tex [[x]] [[<-]]\, ^{[[l]]} [[input()]] }}
    | if se then s1 else s2 fi          :: :: If
        {{ tex [[if]]~[[se]]~[[then]]~[[s1]]~[[else]]~[[s2]]~[[fi]] }}
    | end if                            :: :: EndIf
        {{ com used for recording; not in surface language }}
    | l ^ for x in se1 : se2 do s od    :: :: For
        {{ tex ^{[[l]]} [[for]]~[[x]]~[[in]]~[[se1]]\negmedspace:\negmedspace[[se2]]~[[do]]~[[s]]~[[od]] }}
    | l ^ end for                       :: :: EndFor
        {{ com used for recording; not in surface language }}
        {{ tex ^{[[l]]} [[end]]~[[for]] }}
    | s1 ; s2                           :: :: Seq           {{ com sequencing }}
    | skip                              :: :: Skip

%%% Recorded statements %%%
rs {{ tex \overline{s} }} :: 'rs_' ::=              {{ com recorded statements }}
    | x <- rse                                  :: :: SimpleExp
    | x <- ( isNA ( rse ) , v )                 :: :: IsNA
        {{ tex [[x]] [[<-]] \langle [[isNA]]([[rse]]), [[v]] \rangle }}
    | x <- ( uop ( rse ) , v )                  :: :: UOp
        {{ tex [[x]] [[<-]] \langle [[uop]]([[rse]]), [[v]] \rangle }}
    | x <- ( bop ( rse1 , rse2 ) , v )          :: :: BOp
        {{ tex [[x]] [[<-]] \langle [[bop]]([[rse1]], [[rse2]]), [[v]] \rangle }}
    | x <- ( l ^ input() , v )                  :: :: Input
        {{ tex [[x]] [[<-]]\, \langle ^{[[l]]} [[input()]], [[v]] \rangle }}
    | if rse begin                              :: :: If
        {{ tex [[if]]~[[rse]]~[[begin]] }}
    | end if                                    :: :: EndIf
    | l ^ for ( x , v ) in rse1 : rse2 begin        :: :: For
        {{ tex ^{[[l]]} [[for]]~\langle [[x]], [[v]] \rangle~[[in]]~[[rse1]]\negmedspace:\negmedspace[[rse2]]~[[begin]] }}
    | l ^ end for                                   :: :: EndFor
        {{ tex ^{[[l]]} [[end]]~[[for]] }}

%%% Environment %%%
E :: 'Env_' ::=                                     {{ com environment }}
    | empty                         :: :: Empty         {{ com empty environment }}
    | E [ x -> v ]                  :: :: UpdateEnv     {{ com environment update }}

%%% Input stream %%%
I :: 'I_' ::=                                       {{ com input stream }}
    | empty                         :: :: Empty         {{ com empty stream }}
    | v . I                         :: :: Single        {{ tex [[v]]\!\cdot\![[I]] }}

%%% Machine configuration %%%
C :: 'C_' ::=                                       {{ com machine configuration }}
    | s E I                         :: :: sEI           {{ tex [[s]]\enspace[[E]]\,[[I]] }}

%%% Recorded state %%%
r :: 'r_' ::=                                       {{ com recorded state }}
    | [ rs , E ]                    :: :: RecordedState
        {{ com recorded statement and environment }}
        {{ tex \langle [[rs]],[[E]] \rangle }}

%%% Execution trace %%%
T :: 'T_' ::=                                       {{ com execution trace }}
    | empty                         :: :: Empty         {{ com empty trace }}
    | r                             :: :: Single        {{ com singleton }} {{ tex [[r]] }}
    | T . r                         :: :: Append        {{ com append }} {{ tex [[T]]\!\cdot\![[r]] }}
    | r . T                         :: :: Prepend       {{ com prepend }} {{ tex [[r]]\!\cdot\![[T]] }}

%%% Recorded machine configuration %%%
rC {{ tex \overline{C} }} :: 'rC_' ::=              {{ com recorded machine configuration }}
    | C T                           :: :: CT


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% ANALYSIS GRAMMAR %%%
L :: 'L_' ::=                                       {{ com label set }}
    | empty                         :: :: Empty         {{ com empty label set }}
    | { l1 , ... , ln }             :: :: Set           {{ com labels }}
    | L1 union L2                   :: :: Intersection  {{ com union }}

k :: 'k_' ::=                                      {{ com lattice element }}
    | alpha ( v )                   :: :: alpha         {{ com abstraction of concrete value }} {{ tex \alpha([[v]]) }}
    | Auop k                        :: :: Auop          {{ com abstract unary operation }}
    | k1 Abop k2                    :: :: Abop          {{ com abstract binary operation }}
    | k1 lub k2                     :: :: Lub           {{ com least upper bound }}
    | k1 glb k2                     :: :: Glb           {{ com greatest lower bound }}
    | Top                           :: :: Top           {{ com top }}
    | Bot                           :: :: Bot           {{ com bot }}
    % NA lattice
    | NA                            :: :: NA            {{ com \na lattice }} {{ tex \textsc{na} }}
    | ! NA                          :: :: NotNA         {{ com \na lattice }} {{ tex \neg \textsc{na} }}
    % Type lattice
    | Bool                          :: :: Bool          {{ com type lattice }} {{ tex \textsf{Bool} }}
    | Int                           :: :: Int           {{ com type lattice }} {{ tex \textsf{Int} }}
    | Str                           :: :: Str           {{ com type lattice }} {{ tex \textsf{Str} }}

Av {{ tex \widehat{v} }} :: 'Av_' ::=               {{ com abstract value }}
    | [ k1 , k2 , L ]               :: :: AVal          {{ tex \langle [[k1]], [[k2]], [[L]] \rangle }}

AE {{ tex \widehat{E} }} :: 'AE_' ::=               {{ com abstract environment }}
    | empty                         :: :: Empty         {{ com empty environment }}
    | AE [ x -> a ]                 :: :: EnvBind       {{ com environment binding }}

AH {{ tex \widehat{H} }} :: 'AH_' ::=               {{ com abstract store }}
    | empty                         :: :: Empty         {{ com empty heap }}
    | AH [ a -> Av ]                :: :: HeapBind      {{ com heap binding }}

AC {{ tex \widehat{C} }} :: 'AC_' ::=               {{ com abstract configuration }}
    | AE AH M                       :: :: EM            {{ tex [[AE]]\,[[AH]]\,[[M]] }}

M :: 'M_' ::=                                       {{ com analysis state }}
    | empty                         :: :: Empty         {{ com empty state }}
    | M [ l -> k ]                  :: :: StateBind     {{ com state binding }}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% TERMINALS %%%
terminals :: 'terminals_' ::=
    | true          :: :: True          {{ tex \textsf{true} }}
    | false         :: :: False         {{ tex \textsf{false} }}
    | NA_b          :: :: NA_b          {{ tex \bna }}
    | NA_i          :: :: NA_i          {{ tex \ina }}
    | NA_s          :: :: NA_s          {{ tex \sna }}
    | uop_l         :: :: Unary_lgl     {{ tex \circ_\textsf{lgl} }}
    | uop_a         :: :: Unary_arith   {{ tex \circ_\textsf{arth} }}
    | bop_a         :: :: Binary_arith  {{ tex \diamond_\textsf{arth} }}
    | bop_r         :: :: Binary_rel    {{ tex \diamond_\textsf{rel} }}
    | bop_l         :: :: Binary_lgl    {{ tex \diamond_\textsf{lgl} }}
    | isNA          :: :: IsNA          {{ tex \isna }}
    | input()       :: :: Input         {{ tex \ipt }}
    | <-            :: :: Assign        {{ tex \leftarrow }}
    | if            :: :: If            {{ tex \textsf{if} }}
    | then          :: :: Then          {{ tex \textsf{then} }}
    | else          :: :: Else          {{ tex \textsf{else} }}
    | fi            :: :: Fi            {{ tex \textsf{fi} }}
    | for           :: :: For           {{ tex \textsf{for} }}
    | in            :: :: In            {{ tex \textsf{in} }}
    | do            :: :: Do            {{ tex \textsf{do} }}
    | od            :: :: Od            {{ tex \textsf{od} }}
    | begin         :: :: Begin         {{ tex \textsf{begin} }}
    | end           :: :: End           {{ tex \textsf{end} }}
    | skip          :: :: Skip          {{ tex \textsf{skip} }}
    | empty         :: :: Empty         {{ tex \emptyset }}
    | ->            :: :: MapsTo        {{ tex \mapsto }}
    | -se->         :: :: EvalSE        {{ tex \rightharpoonup }}
    | -->           :: :: EvalS         {{ tex \longmapsto }}
    | -rec-se->     :: :: RecSE         {{ tex \overset{\mathrm{rec} }{\rightharpoonup} }}
    | -rec-e->      :: :: RecE          {{ tex \overset{\mathrm{rec} }{\longrightarrow} }}
    | -rec->        :: :: RecS          {{ tex \overset{\mathrm{rec} }{\longmapsto} }}
    | =/=           :: :: NEq           {{ tex \neq }}
    | /\            :: :: And           {{ tex \land }}
    | \/            :: :: Or            {{ tex \lor }}
    | Top           :: :: Top           {{ tex \top }}
    | Bot           :: :: Bot           {{ tex \bot }}
    | union         :: :: Union         {{ tex \cup }}
    | Auop          :: :: Auop          {{ tex \widehat{\circ} }}
    | Abop          :: :: Abop          {{ tex \widehat{\diamond} }}
    | lub           :: :: Lub           {{ tex \sqcup }}
    | glb           :: :: Glb           {{ tex \sqcap }}
    | -na-se->      :: :: NA_SEEval     {{ tex \overset{\textsf{NA} }{\rightsquigarrow}_{se} }}
    | -na-e->       :: :: NA_EEval      {{ tex \overset{\textsf{NA} }{\rightsquigarrow}_{e} }}
    | -na->         :: :: NA_Eval       {{ tex \overset{\textsf{NA} }{\rightsquigarrow} }}
    | -type-se->    :: :: Type_SEEval   {{ tex \overset{\textsf{Type} }{\rightsquigarrow}_{se} }}
    | -type-e->     :: :: Type_EEval    {{ tex \overset{\textsf{Type} }{\rightsquigarrow}_{e} }}
    | -type->       :: :: Type_Eval     {{ tex \overset{\textsf{Type} }{\rightsquigarrow} }}

%%% FORMULAS %%%
formula :: 'formula_' ::=
  | judgement                               :: :: judgement
  | ( formula )                             :: :: parens
  | formula1 /\ formula2                    :: :: and
  | formula1 \/ formula2                    :: :: or
  | v = E ( x )                             :: :: lookup
  | v = [[ uop ]] ( se )                    :: :: primop_uop    {{ tex [[v]] = \llbracket [[uop]] \rrbracket_1 ([[se]]) }}
  | v = [[ bop ]] ( se1 , se2 )             :: :: primop_bop    {{ tex [[v]] = \llbracket [[bop]] \rrbracket_2 ([[se1]], [[se2]]) }}
  | v1 = v2                                 :: :: equal
  | v1 =/= v2                               :: :: not_equal
  | v1 < v2                                 :: :: less_than
  | v1 > v2                                 :: :: greater_than
  | v' = v1 + v2                            :: :: plus
  | v' = v1 - v2                            :: :: minus
  | E1 = E2                                 :: :: environment
  | I1 = I2                                 :: :: input_stream
  | T1 = T2                                 :: :: trace
  | rse1 = rse2                             :: :: rse_equal
  | r1 = r2                                 :: :: recorded_state
  | a = AE ( x )                            :: :: abstract_env_lookup
  | AE' = AE [ x -> a ]                     :: :: abstract_env_update
  | Av = AH ( a )                           :: :: abstract_heap_lookup
  | AH' = AH [ a -> Av ]                    :: :: abstract_heap_update
  | Av1 = Av2                               :: :: abstract_val_equal
  | fresh ( a )                             :: :: fresh_addr    {{ tex [[a]]~\text{fresh} }}
  | M [ l -> k ]                            :: :: update_state
  | M = forall-labs ( l : L ) . formula     :: :: forall_labs   {{ tex [[M]] = \forall [[l]] \in [[L]]\,.\,[[formula]] }}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%% CONCRETE OPERATIONAL SEMANTICS %%%
defns
operational_semantics :: '' ::=

    %%% Evaluation of simple expressions %%%
    defn
    E se -se-> v :: :: eval_se :: 'SE_'
        {{ com evaluation of simple expressions }}
        {{ tex [[E]]\enspace[[se]] [[-se->]] [[v]] }}
    by

        -----------  :: Literal
        E v -se-> v

        v = E(x)
        --------------  :: Variable
        E x -se-> v

    %%% Evaluation of statements %%%
    defn
    C --> C' :: :: eval_s :: 'S_'
        {{ com evaluation of program states }}
        {{ tex [[C]] [[-->]] [[C']] }}
    by

        E se -se-> v
        E' = E[x -> v]
        -------------------------  :: SimpleExp
        x <- se E I --> skip E' I

        E se -se-> v
        v = NA_b \/ v = NA_i \/ v = NA_s
        E' = E[x -> true]
        -------------------------------- :: IsNA
        x <- isNA(se) E I --> skip E' I

        E se -se-> v
        v =/= NA_b /\ v =/= NA_i /\ v =/= NA_s
        E' = E[x -> false]
        -------------------------------------- :: IsNotNA
        x <- isNA(se) E I --> skip E' I

        E se -se-> v
        v' = [[uop]](v)
        E' = E[x -> v']
        ------------------------------  :: UnaryOp
        x <- uop(se) E I --> skip E' I

        E se1 -se-> v1
        E se2 -se-> v2
        v' = [[bop]](v1, v2)
        E' = E[x -> v']
        ------------------------------------  :: BinaryOp
        x <- bop(se1, se2) E I --> skip E' I

        I = v . I'
        E' = E[x -> v]
        -----------------------------------  :: Input
        x <- l ^ input() E I --> skip E' I'

        E se -se-> true
        ---------------------------------------  :: IfTrue
        if se then s1 else s2 fi E I --> s1 E I

        E se -se-> false
        ---------------------------------------  :: IfFalse
        if se then s1 else s2 fi E I --> s2 E I

        E se1 -se-> v1
        E se2 -se-> v2
        v1' = v1 + 1
        E' = E[x -> v1]
        v1 < v2
        ----------------------------------------------------------------------------  :: ForIncr
        l ^ for x in se1 : se2 do s od E I --> s; l ^ for x in v1' : v2 do s od E' I

        E se1 -se-> v1
        E se2 -se-> v2
        v1' = v1 - 1
        E' = E[x -> v1]
        v1 > v2
        ----------------------------------------------------------------------------  :: ForDecr
        l ^ for x in se1 : se2 do s od E I --> s; l ^ for x in v1' : v2 do s od E' I

        E se1 -se-> v1
        E se2 -se-> v2
        E' = E[x -> v1]
        v1 = v2
        ---------------------------------------------  :: ForEqual
        l ^ for x in se1 : se2 do s od E I --> s E' I

        s1 E I --> s1' E' I'
        ----------------------------  :: Seq
        s1; s2 E I --> s1'; s2 E' I'

        -----------------------  :: Skip
        skip; s2 E I --> s2 E I

%%% RECORDING SEMANTICS %%%
defns
record :: '' ::=

    %%% Recording simple expressions %%%
    defn
    E se -rec-se-> rse :: :: rec_se :: 'RecSE_'
        {{ com recording a simple expression stores the result of that simple expression }}
        {{ tex [[E]]\enspace[[se]] [[-rec-se->]] [[rse]] }}
    by

        --------------------  :: Literal
        E v -rec-se-> (v, v)

        v = E(x)
        --------------------  :: Variable
        E x -rec-se-> (x, v)


    %%% Recording statements %%%
    defn
    rC -rec-> rC' :: :: rec_s :: 'RecS_'
        {{ com recording a program state updates the program state (and execution trace) }}
        {{ tex [[rC]] [[-rec->]] [[rC']] }}
    by

        E se -rec-se-> rse
        rse = (se, v)
        E' = E[x -> v]
        T' = T . [x <- rse, E']
        ---------------------------------  :: SimpleExp
        x <- se E I T -rec-> skip E' I T'

        E se -rec-se-> rse
        rse = (se, v)
        v = NA_b \/ v = NA_i \/ v = NA_s
        E' = E[x -> v]
        T' = T . [x <- (isNA(rse), true), E']
        ---------------------------------------  :: IsNA
        x <- isNA(se) E I T -rec-> skip E' I T'

        E se -rec-se-> rse
        rse = (se, v)
        v =/= NA_b /\ v =/= NA_i /\ v =/= NA_s
        E' = E[x -> v]
        T' = T . [x <- (isNA(rse), false), E']
        ---------------------------------------  :: IsNotNA
        x <- isNA(se) E I T -rec-> skip E' I T'

        E se -rec-se-> rse
        rse = (se, v)
        v' = [[uop]](v)
        E' = E[x -> v']
        T' = T . [x <- (uop(rse), v'), E']
        --------------------------------------  :: UnaryOp
        x <- uop(se) E I T -rec-> skip E' I T'

        E se1 -rec-se-> rse1
        rse1 = (se1, v1)
        E se2 -rec-se-> rse2
        rse2 = (se2, v2)
        v' = [[bop]](v1, v2)
        E' = E[x -> v']
        T' = T . [x <- (bop(rse1, rse2), v'), E']
        --------------------------------------------  :: BinaryOp
        x <- bop(se1, se2) E I T -rec-> skip E' I T'

        I = v . I'
        E' = E[x -> v]
        T' = T . [x <- (l ^ input(), v), E']
        -------------------------------------------  :: Input
        x <- l ^ input() E I T -rec-> skip E' I' T'

        E se -rec-se-> rse
        rse = (se, true)
        T' = T . [if rse begin, E']
        ---------------------------------------------------------  :: IfTrue
        if se then s1 else s2 fi E I T -rec-> s1; end if E' I' T'

        E se -rec-se-> rse
        rse = (se, false)
        T' = T . [if rse begin, E']
        ---------------------------------------------------------  :: IfFalse
        if se then s1 else s2 fi E I T -rec-> s2; end if E' I' T'

        T' = T . [end if, E]
        -------------------------------  :: IfEnd
        end if E I T -rec-> skip E I T'

        E se1 -rec-se-> rse1
        rse1 = (se1, v1)
        E se2 -rec-se-> rse2
        rse2 = (se2, v2)
        v1' = v1 + 1
        E' = E[x -> v1]
        T' = T . [l ^ for (x, v1) in rse1 : rse2 begin, E']
        v1 < v2
        ------------------------------------------------------------------------------------  :: ForIncr
        l ^ for x in se1 : se2 do s od E I T -rec-> s; l ^ for x in v1' : v2 do s od E' I T'

        E se1 -rec-se-> rse1
        rse1 = (se1, v1)
        E se2 -rec-se-> rse2
        rse2 = (se2, v2)
        v1' = v1 - 1
        E' = E[x -> v1]
        T' = T . [l ^ for (x, v1) in rse1 : rse2 begin, E']
        v1 > v2
        ------------------------------------------------------------------------------------  :: ForDecr
        l ^ for x in se1 : se2 do s od E I T -rec-> s; l ^ for x in v1' : v2 do s od E' I T'

        E se1 -rec-se-> rse1
        rse1 = (se1, v1)
        E se2 -rec-se-> rse2
        rse2 = (se2, v2)
        E' = E[x -> v1]
        T' = T . [l ^ for (x, v1) in rse1 : rse2 begin, E']
        v1 = v2
        ------------------------------------------------------------------  :: ForEqual
        l ^ for x in se1 : se2 do s od E I T -rec-> s; l ^ end for E' I T'

        T' = T . [l ^ end for, E]
        ------------------------------------  :: ForEnd
        l ^ end for E I T -rec-> skip E I T'

        s1 E I T -rec-> s1' E' I' T'
        ------------------------------------  :: Seq
        s1; s2 E I T -rec-> s1'; s2 E' I' T'

        ------------------------------  :: Skip
        skip; s2 E I T -rec-> s2 E I T


%%%% NA ANALYSIS SEMANTICS %%%
%defns
%na_analysis :: 'NA_' ::=
%
%    defn
%    AE AH rse -na-se-> a Av :: :: na_eval_se :: 'SE_'
%        {{ com abstract evaluation of simple expressions returns an address and abstract value }}
%        {{ tex [[AE]]\,[[AH]]\enspace[[rse]] [[-na-se->]] [[a]],[[Av]] }}
%    by
%
%        Av = [alpha(v), alpha(v), empty]
%        fresh(a)
%        --------------------------------  :: Literal
%        AE AH (v, v) -na-se-> a Av
%
%        a = AE(x)
%        Av = AH(a)
%        --------------------------  :: Variable
%        AE AH (x, v) -na-se-> a Av
%
%    defn
%    AE AH ( re , v ) -na-e-> a Av :: :: na_eval_e :: 'E_'
%        {{ com abstract evaluation of expressions returns an address and abstract value }}
%        {{ tex [[AE]]\,[[AH]]\enspace([[re]],[[v]]) [[-na-e->]] [[a]],[[Av]] }}
%    by
%
%        Av = [!NA, !NA, empty]
%        fresh(a)
%        --------------------------------  :: IsNA
%        AE AH (isNA rse, v) -na-e-> a Av
%
%        AE AH rse -na-se-> a [k1, k2, L]
%        Av = [alpha(v), Auop k2, L]
%        fresh(a')
%        ------------------------------------  :: UnaryOp
%        AE AH (uop(rse), v) -na-e-> a' Av
%
%        AE AH rse1 -na-se-> a1 [k11, k12, L1]
%        AE AH rse2 -na-se-> a2 [k21, k22, L2]
%        Av = [alpha(v), k12 Abop k22, L1 union L2]
%        fresh(a)
%        ----------------------------------------------  :: BinaryOp
%        AE AH (bop(rse1, rse2), v) -na-e-> a Av
%
%        AE AH rse -na-se-> a Av
%        ---------------------------  :: SimpleExpression
%        AE AH (rse, v) -na-e-> a Av
%
%    defn
%    T AC -na-> T' AC' :: :: na_analysis :: 'S_'
%        {{ com analysis of execution trace updates the abstract environment and analysis state }}
%        {{ tex [[T]]~[[AC]] [[-na->]] [[T']]~[[AC']] }}
%    by
%
%        -----------------------------------  :: Simple
%        [rse E] . T AE AH M -na-> T AE AH M
%
%        AE AH (re, v) -na-e-> a Av
%        AE' = AE[x -> a]
%        AH' = AH[a -> Av]
%        ----------------------------------------------  :: Assign
%        [x <- (re, v) E] . T AE AH M -na-> T AE' AH' M
%
%        Av = [alpha(v), Top, {l}]
%        fresh(a)
%        AE' = AE[x -> a]
%        AH' = AH[a -> Av]
%        -------------------------------------------------------  :: Input
%        [x <- (l ^ input(), v) E] . T AE AH M -na-> T AE' AH' M
%
%        AE AH rse -na-se-> a Av
%        Av = [k1, k2, L]
%        Av' = [k1, !NA, L]
%        AH' = AH[a -> Av']
%% TODO: this notation is ugly
%        M' = forall-labs (l : L) . M[l -> !NA]
%        ---------------------------------------------------------  :: If
%        [if rse then . else . fi E] . T AE AH M -na-> T AE AH' M'
%
%        AE AH rse1 -na-se-> a1 Av1
%        AE AH rse2 -na-se-> a2 Av2
%        Av1 = [k11, k12, L1]
%        Av2 = [k21, k22, L2]
%        Av1' = [k11, !NA, L1]
%        Av2' = [k21, !NA, L2]
%        AH' = AH[a1 -> Av1']
%        AH'' = AH'[a2 -> Av2']
%% TODO: this notation is ugly
%        M' = forall-labs (l : L1 union L2) . M[l -> !NA]
%        -------------------------------------------------------------------  :: For
%        [for (x, v) in rse1 : rse2 do . od E] . T AE AH M -na-> T AE AH' M'
%
%
%%%% TYPE ANALYSIS SEMANTICS %%%
%defns
%type_analysis :: 'Type_' ::=
%
%    defn
%    AE AH rse -type-se-> a Av :: :: type_eval_se :: 'SE_'
%        {{ com abstract evaluation of simple expressions returns an address and abstract value }}
%        {{ tex [[AE]]\,[[AH]]\enspace[[rse]] [[-type-se->]] [[a]],[[Av]] }}
%    by
%
%        Av = [alpha(v), alpha(v), empty]
%        fresh(a)
%        --------------------------------  :: Literal
%        AE AH (v, v) -type-se-> a Av
%
%        a = AE(x)
%        Av = AH(a)
%        --------------------------  :: Variable
%        AE AH (x, v) -type-se-> a Av
%
%    defn
%    AE AH ( re , v ) -type-e-> a Av :: :: type_eval_e :: 'E_'
%        {{ com abstract evaluation of expressions returns an address and abstract value }}
%        {{ tex [[AE]]\,[[AH]]\enspace([[re]],[[v]]) [[-type-e->]] [[a]],[[Av]] }}
%    by
%
%        Av = [Bool, Bool, empty]
%        fresh(a)
%        --------------------------------  :: IsNA
%        AE AH (isNA rse, v) -type-e-> a Av
%
%        AE AH rse -type-se-> a Av1
%        Av1 = [k1, k2, L]
%        Av1' = [k1, Bool, L]
%% TODO: need to propagate Av1' constraint and update M
%        Av' = [alpha(v), Bool, L]
%        fresh(a')
%        --------------------------------------  :: UnaryOpBool
%        AE AH (uop_l(rse), v) -type-e-> a' Av'
%
%        AE AH rse -type-se-> a Av1
%        Av1 = [k1, k2, L]
%        Av1' = [k1, Int, L]
%% TODO: need to propagate Av1' constraint and update M
%        Av' = [alpha(v), Int, L]
%        fresh(a')
%        --------------------------------------  :: UnaryOpInt
%        AE AH (uop_a(rse), v) -type-e-> a' Av'
%
%        AE AH rse1 -type-se-> a1 Av1
%        Av1 = [k11, k12, L1]
%        Av1' = [k11, Bool, L1]
%% TODO: need to propagate Av1' constraint and update M
%        AE AH rse2 -type-se-> a2 Av2
%        Av2 = [k21, k22, L2]
%        Av2' = [k21, Bool, L2]
%% TODO: need to propagate Av2' constraint and update M
%        Av = [alpha(v), Bool, L1 union L2]
%        fresh(a)
%        -------------------------------------------  :: BinaryOpBool
%        AE AH (bop_l(rse1, rse2), v) -type-e-> a Av
%
%        AE AH rse1 -type-se-> a1 Av1
%        Av1 = [k11, k12, L1]
%        Av1' = [k11, Int, L1]
%% TODO: need to propagate Av1' constraint and update M
%        AE AH rse2 -type-se-> a2 Av2
%        Av2 = [k21, k22, L2]
%        Av2' = [k21, Int, L2]
%% TODO: need to propagate Av2' constraint and update M
%        Av = [alpha(v), Int, L1 union L2]
%        fresh(a)
%        ----------------------------------------------  :: BinaryOpInt
%        AE AH (bop_a(rse1, rse2), v) -type-e-> a Av
%
%        AE AH rse1 -type-se-> a1 Av1
%        Av1 = [k11, k12, L1]
%        AE AH rse2 -type-se-> a2 Av2
%        Av2 = [k21, k22, L2]
%        Av = [alpha(v), k12 Abop k22, L1 union L2]
%        fresh(a)
%        ----------------------------------------------  :: BinaryOp
%        AE AH (bop(rse1, rse2), v) -type-e-> a Av
%
%        AE AH rse -type-se-> a Av
%        -----------------------------  :: SimpleExpression
%        AE AH (rse, v) -type-e-> a Av
%
%    defn
%    T AC -type-> T' AC' :: :: type_analysis :: 'S_'
%        {{ com analysis of execution trace updates the abstract environment and analysis state }}
%        {{ tex [[T]]~[[AC]] [[-type->]] [[T']]~[[AC']] }}
%    by
%
%        -------------------------------------  :: Simple
%        [rse E] . T AE AH M -type-> T AE AH M
%
%        AE AH (re, v) -type-e-> a Av
%        AE' = AE[x -> a]
%        AH' = AH[a -> Av]
%        ------------------------------------------------  :: Assign
%        [x <- (re, v) E] . T AE AH M -type-> T AE' AH' M
%
%        Av = [alpha(v), Top, {l}]
%        fresh(a)
%        AE' = AE[x -> a]
%        AH' = AH[a -> Av]
%        ---------------------------------------------------------  :: Input
%        [x <- (l ^ input(), v) E] . T AE AH M -type-> T AE' AH' M
%
%        AE AH rse -type-se-> a Av
%        Av = [k1, k2, L]
%        Av' = [k1, Bool, L]
%        AH' = AH[a -> Av']
%% TODO: this notation is ugly
%        M' = forall-labs (l : L) . M[l -> Bool]
%        -----------------------------------------------------------  :: If
%        [if rse then . else . fi E] . T AE AH M -type-> T AE AH' M'
%
%        AE AH rse1 -type-se-> a1 Av1
%        AE AH rse2 -type-se-> a2 Av2
%        Av1 = [k11, k12, L1]
%        Av2 = [k21, k22, L2]
%        Av1' = [k11, Int, L1]
%        Av2' = [k21, Int, L2]
%        AH' = AH[a1 -> Av1']
%        AH'' = AH'[a2 -> Av2']
%% TODO: this notation is ugly
%        M' = forall-labs (l : L1 union L2) . M[l -> Int]
%        -------------------------------------------------------------------  :: For
%        [for (x, v) in rse1 : rse2 do . od E] . T AE AH M -type-> T AE AH' M'
